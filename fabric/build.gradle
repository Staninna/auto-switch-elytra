plugins {
    id 'com.github.johnrengelman.shadow'
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common {
        canBeResolved = true
        canBeConsumed = false
    }
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common

    // Files in this configuration will be bundled into your mod using the Shadow plugin.
    // Don't use the `shadow` configuration from the plugin itself as it's meant for excluding files.
    shadowBundle {
        canBeResolved = true
        canBeConsumed = false
    }
}

repositories {
    mavenLocal()
    maven { url "https://maven.shedaniel.me/" }                 // cloth config
    maven {	url 'https://maven.terraformersmc.com/releases/' }  // modmenu
    maven { url "https://maven.isxander.dev/releases"}          // yacl
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:$rootProject.fabric_loader_version"

    modImplementation "net.fabricmc.fabric-api:fabric-api:$rootProject.fabric_api_version"


    common(project(path: ':common', configuration: 'namedElements')) { transitive false }
    shadowBundle project(path: ':common', configuration: 'transformProductionFabric')

    modImplementation "me.shedaniel.cloth:cloth-config-${project.name}:${cloth_config_version}"
    modImplementation "com.terraformersmc:modmenu:${modmenu_version}"
    // 只能用neoforge的源码，至于啥原因，咱也不知道，咱也不敢问
    compileOnly group: "dev.isxander", name: "yet-another-config-lib", version: "${yacl_version_base}-neoforge"
}

processResources {
    inputs.property 'version', project.version

    filesMatching('fabric.mod.json') {
        expand version: project.version
    }
}

shadowJar {
    configurations = [project.configurations.shadowBundle]
    archiveClassifier = 'dev-shadow'
}

remapJar {
    input.set shadowJar.archiveFile
}
